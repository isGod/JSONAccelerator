//
//  {CLASSNAME}.m
//
//  Created by __NAME__ on {DATE}
//  Copyright (c) {COMPANY_NAME}. All rights reserved.
//

#import "{CLASSNAME}.h"
{IMPORT_BLOCK}
{STRING_CONSTANT_BLOCK}
@interface {CLASSNAME} ()

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict;

@end

@implementation {CLASSNAME}

{SYNTHESIZE_BLOCK}
+ (instancetype)modelObjectWithDictionary:(NSDictionary *)dict {
    return [[self alloc] initWithDictionary:dict];
}

- (instancetype)initWithDictionary:(NSDictionary *)dict {
    self = [super init];
    // This check serves to make sure that a non-NSDictionary object
    // passed into the model class doesn't break the parsing.
    if (self && [dict isKindOfClass:[NSDictionary class]]) {
{SETTERS}
    }
    return self;
}

- (NSDictionary *)dictionaryRepresentation {
    NSMutableDictionary *mutableDict = [NSMutableDictionary dictionary];
{DICTIONARY_REPRESENTATION}
    return [NSDictionary dictionaryWithDictionary:mutableDict];
}

- (NSString *)description  {
    return [NSString stringWithFormat:@"%@", [self dictionaryRepresentation]];
}

#pragma mark - Helper Method
- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict {
    id object = [dict objectForKey:aKey];
    return [object isEqual:[NSNull null]] ? nil : object;
}

#pragma mark - NSCoding Methods

- (id)initWithCoder:(NSCoder *)aDecoder {
    self = [super init];
{INITWITHCODER}
    return self;
}

- (void)encodeWithCoder:(NSCoder *)aCoder {
{ENCODEWITHCODER}
}

- (id)copyWithZone:(NSZone *)zone {
    {CLASSNAME} *copy = [[{CLASSNAME} alloc] init];
    if (copy) {
{COPYWITHZONE}
    }
    return copy;
}
{DEALLOC}
@end
